// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: CapTexture.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 7000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(ca5724c574c6b876);
enum class CapTextureType_ca5724c574c6b876: uint16_t {
  SIMPLE,
};
CAPNP_DECLARE_ENUM(CapTextureType, ca5724c574c6b876);
CAPNP_DECLARE_SCHEMA(e1cd3320d32be4e1);
enum class CapChannel_e1cd3320d32be4e1: uint16_t {
  NONE,
  RED,
  GREEN,
  BLUE,
  ALPHA,
};
CAPNP_DECLARE_ENUM(CapChannel, e1cd3320d32be4e1);
CAPNP_DECLARE_SCHEMA(beb479d22709271d);
CAPNP_DECLARE_SCHEMA(8a58b095701321ef);

}  // namespace schemas
}  // namespace capnp


typedef ::capnp::schemas::CapTextureType_ca5724c574c6b876 CapTextureType;

typedef ::capnp::schemas::CapChannel_e1cd3320d32be4e1 CapChannel;

struct CapTextureHeader {
  CapTextureHeader() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(beb479d22709271d, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CapTexture {
  CapTexture() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8a58b095701321ef, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class CapTextureHeader::Reader {
public:
  typedef CapTextureHeader Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::CapTextureType getType() const;

  inline  ::uint32_t getWidth() const;

  inline  ::uint32_t getHeight() const;

  inline  ::CapChannel getRChannel() const;

  inline  ::CapChannel getGChannel() const;

  inline  ::CapChannel getBChannel() const;

  inline  ::CapChannel getAChannel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CapTextureHeader::Builder {
public:
  typedef CapTextureHeader Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::CapTextureType getType();
  inline void setType( ::CapTextureType value);

  inline  ::uint32_t getWidth();
  inline void setWidth( ::uint32_t value);

  inline  ::uint32_t getHeight();
  inline void setHeight( ::uint32_t value);

  inline  ::CapChannel getRChannel();
  inline void setRChannel( ::CapChannel value);

  inline  ::CapChannel getGChannel();
  inline void setGChannel( ::CapChannel value);

  inline  ::CapChannel getBChannel();
  inline void setBChannel( ::CapChannel value);

  inline  ::CapChannel getAChannel();
  inline void setAChannel( ::CapChannel value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CapTextureHeader::Pipeline {
public:
  typedef CapTextureHeader Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CapTexture::Reader {
public:
  typedef CapTexture Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::CapTextureHeader::Reader getHeader() const;

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CapTexture::Builder {
public:
  typedef CapTexture Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::CapTextureHeader::Builder getHeader();
  inline void setHeader( ::CapTextureHeader::Reader value);
  inline  ::CapTextureHeader::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::CapTextureHeader>&& value);
  inline ::capnp::Orphan< ::CapTextureHeader> disownHeader();

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CapTexture::Pipeline {
public:
  typedef CapTexture Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::CapTextureHeader::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::CapTextureType CapTextureHeader::Reader::getType() const {
  return _reader.getDataField< ::CapTextureType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::CapTextureType CapTextureHeader::Builder::getType() {
  return _builder.getDataField< ::CapTextureType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CapTextureHeader::Builder::setType( ::CapTextureType value) {
  _builder.setDataField< ::CapTextureType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CapTextureHeader::Reader::getWidth() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CapTextureHeader::Builder::getWidth() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CapTextureHeader::Builder::setWidth( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CapTextureHeader::Reader::getHeight() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CapTextureHeader::Builder::getHeight() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CapTextureHeader::Builder::setHeight( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::CapChannel CapTextureHeader::Reader::getRChannel() const {
  return _reader.getDataField< ::CapChannel>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::CapChannel CapTextureHeader::Builder::getRChannel() {
  return _builder.getDataField< ::CapChannel>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CapTextureHeader::Builder::setRChannel( ::CapChannel value) {
  _builder.setDataField< ::CapChannel>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::CapChannel CapTextureHeader::Reader::getGChannel() const {
  return _reader.getDataField< ::CapChannel>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::CapChannel CapTextureHeader::Builder::getGChannel() {
  return _builder.getDataField< ::CapChannel>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CapTextureHeader::Builder::setGChannel( ::CapChannel value) {
  _builder.setDataField< ::CapChannel>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::CapChannel CapTextureHeader::Reader::getBChannel() const {
  return _reader.getDataField< ::CapChannel>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::CapChannel CapTextureHeader::Builder::getBChannel() {
  return _builder.getDataField< ::CapChannel>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void CapTextureHeader::Builder::setBChannel( ::CapChannel value) {
  _builder.setDataField< ::CapChannel>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::CapChannel CapTextureHeader::Reader::getAChannel() const {
  return _reader.getDataField< ::CapChannel>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::CapChannel CapTextureHeader::Builder::getAChannel() {
  return _builder.getDataField< ::CapChannel>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void CapTextureHeader::Builder::setAChannel( ::CapChannel value) {
  _builder.setDataField< ::CapChannel>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool CapTexture::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CapTexture::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::CapTextureHeader::Reader CapTexture::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::CapTextureHeader>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::CapTextureHeader::Builder CapTexture::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::CapTextureHeader>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::CapTextureHeader::Pipeline CapTexture::Pipeline::getHeader() {
  return  ::CapTextureHeader::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CapTexture::Builder::setHeader( ::CapTextureHeader::Reader value) {
  ::capnp::_::PointerHelpers< ::CapTextureHeader>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::CapTextureHeader::Builder CapTexture::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::CapTextureHeader>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CapTexture::Builder::adoptHeader(
    ::capnp::Orphan< ::CapTextureHeader>&& value) {
  ::capnp::_::PointerHelpers< ::CapTextureHeader>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::CapTextureHeader> CapTexture::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::CapTextureHeader>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CapTexture::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CapTexture::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader CapTexture::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder CapTexture::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CapTexture::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder CapTexture::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CapTexture::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> CapTexture::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}


